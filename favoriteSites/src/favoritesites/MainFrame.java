/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package favoritesites;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.text.Normalizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Acer
 */
public class MainFrame extends javax.swing.JFrame {
   
    private String loggedInUsername; 
   
    public void setLoggedInUsername(String username) {
        loggedInUsername = username;
    
    }
    
    public void startLoadingTable() {
    if (loggedInUsername != null) {
        loadTable();
    } 
}

  
    Connection con;
     PreparedStatement ps;
     ResultSet rs;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setTitle("Home page");
        
   
        
         try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/favorite_sites","root","10293847");
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         loadTable();
}
    private void loadTable() {     
        String sql = "SELECT visit_id, country_name, city_name,year_visited, season_visited, best_feature,comments ,rating FROM visits WHERE username = ?";
        
         try {
            ps = con.prepareStatement(sql);
            ps.setString(1, loggedInUsername);
            rs = ps.executeQuery();
            
           
    
            DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
            TableRowSorter rowSorter = new TableRowSorter(model);         
            visitTable.setRowSorter(rowSorter);
            
            while(rs.next()){
                model.addRow(new String[]{ 
                    rs.getString("visit_id"),
                    rs.getString("country_name"),
                    rs.getString("city_name"),
                    rs.getString("year_visited"),
                    rs.getString("season_visited"),
                    rs.getString("best_feature"),
                    rs.getString("comments"),
                    rs.getString("rating")
                });
            }
                    
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        addVisit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        visitTable = new javax.swing.JTable();
        deleteVisit = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        countrybutton = new javax.swing.JButton();
        citybutton = new javax.swing.JButton();
        yearbutton = new javax.swing.JButton();
        seasonbutton = new javax.swing.JButton();
        bestfbutton = new javax.swing.JButton();
        ratingbutton = new javax.swing.JButton();
        idbutton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numberofvisits = new javax.swing.JButton();
        shareOption = new javax.swing.JButton();
        friendUsernametxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sharedVisits = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addVisit.setText("Add Visit");
        addVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVisitActionPerformed(evt);
            }
        });

        visitTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Visit ID", "Country", "City", "Year Visited", "Season Visited", "Best Feature", "Comment", "Rating"
            }
        ));
        jScrollPane1.setViewportView(visitTable);

        deleteVisit.setText("Delete Visit");
        deleteVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVisitActionPerformed(evt);
            }
        });

        updateButton.setText("View / Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        countrybutton.setText("Search by country");
        countrybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countrybuttonActionPerformed(evt);
            }
        });

        citybutton.setText("Search by city");
        citybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                citybuttonActionPerformed(evt);
            }
        });

        yearbutton.setText("Search by year");
        yearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearbuttonActionPerformed(evt);
            }
        });

        seasonbutton.setText("Search by season");
        seasonbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonbuttonActionPerformed(evt);
            }
        });

        bestfbutton.setText("Search by best feature");
        bestfbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestfbuttonActionPerformed(evt);
            }
        });

        ratingbutton.setText("Search by rating");
        ratingbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingbuttonActionPerformed(evt);
            }
        });

        idbutton.setText("Search by id");
        idbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idbuttonActionPerformed(evt);
            }
        });

        jLabel2.setText("You can sort your search by ");

        jLabel3.setText("clicking the title to be sorted.");

        numberofvisits.setText("Number of visits by country");
        numberofvisits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberofvisitsActionPerformed(evt);
            }
        });

        shareOption.setText("Share");
        shareOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareOptionActionPerformed(evt);
            }
        });

        friendUsernametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendUsernametxtActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Share it with a friend!");

        jLabel5.setText("(Enter your friend's username)");

        sharedVisits.setText("See shared visits");
        sharedVisits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharedVisitsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(search, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(187, 187, 187))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(countrybutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(citybutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(yearbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(seasonbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bestfbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ratingbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(idbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel3))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(updateButton)
                        .addGap(40, 40, 40)
                        .addComponent(deleteVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(numberofvisits, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(friendUsernametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(shareOption)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sharedVisits, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 615, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(countrybutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(citybutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(yearbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(seasonbutton)
                        .addGap(12, 12, 12)
                        .addComponent(bestfbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ratingbutton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel1)))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberofvisits, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(friendUsernametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shareOption)
                    .addComponent(sharedVisits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVisitActionPerformed

        // TODO add your handling code here:
        
        AddVisitFrame visitFrame = new AddVisitFrame();
        visitFrame.setLoggedInUsername(loggedInUsername); // Pass the username to the addVisit frame
        visitFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addVisitActionPerformed

    private void deleteVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVisitActionPerformed
        try {                                            
            DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
           
            int row = visitTable.getSelectedRow();
            
            if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete."); // if user haven't selected a row to delete
            return; 
        }
            Object visitID = model.getValueAt(row, 0); //visit_id in the table
            
            
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/favorite_sites","root","10293847");
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            ps = con.prepareStatement("delete from visits where visit_id='"+visitID+"' ");
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Deleted successfully");
            this.dispose();
            MainFrame m = new MainFrame();
            m.setLoggedInUsername(loggedInUsername); 
            m.startLoadingTable();
            m.setVisible(true);
 
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_deleteVisitActionPerformed

    

    
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        int row = visitTable.getSelectedRow();
        
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to edit/update."); // if user haven't selected a row to view or update
            return; 
        }

    Object visitID = model.getValueAt(row, 0);
    this.dispose();
    UpdateFrame u = new UpdateFrame();
    u.setVisitID(visitID);
    u.setLoggedInUsername(loggedInUsername);
    u.setVisible(true);
     
    }//GEN-LAST:event_updateButtonActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased

        String query = search.getText().toLowerCase();
     
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(Entry<? extends DefaultTableModel, ? extends Object> entry) {
                for (int i = 0; i < entry.getValueCount(); i++) {
                    String value = entry.getStringValue(i).toLowerCase();
                    if (value.contains(query)) {
                        return true;
                    }
                }
                return false;
            }
        });
    
    }//GEN-LAST:event_searchKeyReleased

    private void countrybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countrybuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(1).toLowerCase(); //country column index is 1
                return value.contains(query);
            }
        });
    }//GEN-LAST:event_countrybuttonActionPerformed

    private void citybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_citybuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(2).toLowerCase(); //city column index is 2
                return value.contains(query);
            }
        });    }//GEN-LAST:event_citybuttonActionPerformed

    private void idbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idbuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(0).toLowerCase(); //id column index is 0
                return value.contains(query);
            }
        });    }//GEN-LAST:event_idbuttonActionPerformed

    private void yearbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearbuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(3).toLowerCase(); //year column index is 3
                return value.contains(query);
            }
        });    }//GEN-LAST:event_yearbuttonActionPerformed

    private void seasonbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonbuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(4).toLowerCase(); //season column index is 4
                return value.contains(query);
            }
        });    }//GEN-LAST:event_seasonbuttonActionPerformed

    private void bestfbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestfbuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(5).toLowerCase(); //best features column index is 5
                return value.contains(query);
            }
        });    }//GEN-LAST:event_bestfbuttonActionPerformed

    private void ratingbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingbuttonActionPerformed
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
        TableRowSorter rowSorter = new TableRowSorter(model);         
        visitTable.setRowSorter(rowSorter);
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {          
                String value = entry.getStringValue(7).toLowerCase(); //rating column index is 7
                return value.contains(query);
            }
        });    }//GEN-LAST:event_ratingbuttonActionPerformed

    private void numberofvisitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberofvisitsActionPerformed
        try {
        String sql = "SELECT country_name, COUNT(*) as visit_count FROM visits WHERE username = ? GROUP BY country_name ORDER BY visit_count DESC";
        ps = con.prepareStatement(sql);
        ps.setString(1, loggedInUsername);
        rs = ps.executeQuery();
        
        String result = "Number of visits:\n";
        while (rs.next()) {
            String countryName = rs.getString("country_name");
            int visitCount = rs.getInt("visit_count");
            result += countryName + " - " + visitCount + " visits\n";
        }
        
        JOptionPane.showMessageDialog(this, result, "Most Visited Countries", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_numberofvisitsActionPerformed

    private void shareOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shareOptionActionPerformed
       
        
         try { 
            DefaultTableModel model = (DefaultTableModel)visitTable.getModel();
            int row = visitTable.getSelectedRow();
            
            if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to share."); // if user haven't selected a row to share
            return; 
            }
            Object visitID = model.getValueAt(row, 0); //visit_id in the table
             
             
            try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/favorite_sites","root","10293847");
            } catch (SQLException ex) {
                 Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }  
            
            
            // to check if user typed a username
            if(friendUsernametxt.getText().isEmpty()){
                 JOptionPane.showMessageDialog(null, "Please enter a username.");
                 return;
            }
            
            //to check if friend user exists in the userinfo table
            String checkUser= "SELECT username FROM userinfo WHERE username = ?";

            PreparedStatement checkUserPs = con.prepareStatement(checkUser);
            checkUserPs.setString(1, friendUsernametxt.getText());
            ResultSet checkUserRs = checkUserPs.executeQuery();
            if (!checkUserRs.next()) {
                JOptionPane.showMessageDialog(null, "Friend username does not exist.");
                return;
            }
 
            String query = "INSERT INTO sharedvisits (username_to, visit_id, username_from) VALUES (?, ?, ?)";
                 
            ps = con.prepareStatement(query);
            ps.setString(1, friendUsernametxt.getText());
            ps.setInt(2, Integer.parseInt((String) visitID));
            ps.setString(3, loggedInUsername);
            ps.execute();
            
            JOptionPane.showMessageDialog(null,"Share successful!");
        
         } catch (SQLException ex) {
             Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        
        
 
        
    }//GEN-LAST:event_shareOptionActionPerformed

    private void friendUsernametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendUsernametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_friendUsernametxtActionPerformed

    private void sharedVisitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharedVisitsActionPerformed
 
        SharedVisits s = new SharedVisits();
        s.setLoggedInUsername(loggedInUsername); 
        s.startLoadingTable();
        s.setVisible(true);
  
    }//GEN-LAST:event_sharedVisitsActionPerformed

    
   
   
   










           
    
   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVisit;
    private javax.swing.JButton bestfbutton;
    private javax.swing.JButton citybutton;
    private javax.swing.JButton countrybutton;
    private javax.swing.JButton deleteVisit;
    private javax.swing.JTextField friendUsernametxt;
    private javax.swing.JButton idbutton;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton numberofvisits;
    private javax.swing.JButton ratingbutton;
    private javax.swing.JTextField search;
    private javax.swing.JButton seasonbutton;
    private javax.swing.JButton shareOption;
    private javax.swing.JButton sharedVisits;
    private javax.swing.JButton updateButton;
    private javax.swing.JTable visitTable;
    private javax.swing.JButton yearbutton;
    // End of variables declaration//GEN-END:variables
}
